import re
import os
import json

# ==============================================================================
# C√ÅC CH·ª®C NƒÇNG G·ªêC (Ch·∫ø ƒë·ªô 1 & 2)
# ==============================================================================

def extract_to_translate(original_file_path, output_file_path):
    """
    Ch·∫ø ƒë·ªô 1: Tr√≠ch xu·∫•t chu·ªói trong "" t·ª´ file .rpy, b·ªè qua old "..."
    Ghi theo ƒë·ªãnh d·∫°ng: s·ªë_d√≤ng|||chu·ªói_g·ªëc
    """
    print(f"--- B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t t·ª´ '{original_file_path}' ---")
    try:
        with open(original_file_path, 'r', encoding='utf-8') as f_goc, \
             open(output_file_path, 'w', encoding='utf-8') as f_dich:

            for line_num, line in enumerate(f_goc, 1):
                # B·ªè qua d√≤ng c√≥ old "..."
                if re.search(r'\bold\s*"[^"]*"', line):
                    continue

                # T√¨m t·∫•t c·∫£ chu·ªói trong ""
                matches = re.findall(r'"([^"]*)"', line)
                for text in matches:
                    if text.strip():  # Ch·ªâ l∆∞u n·∫øu kh√¥ng r·ªóng
                        f_dich.write(f"{line_num}|||{text}\n")

        print(f"‚úÖ Tr√≠ch xu·∫•t th√†nh c√¥ng! ƒê√£ l∆∞u v√†o: '{output_file_path}'")
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{original_file_path}'.")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")


def import_translation(original_file_path, translation_file_path, new_file_path):
    """
    Ch·∫ø ƒë·ªô 2: Nh·∫≠p b·∫£n d·ªãch t·ª´ file ƒë√£ d·ªãch v√†o file g·ªëc theo s·ªë d√≤ng.
    Thay th·∫ø c√°c chu·ªói "..." theo th·ª© t·ª± xu·∫•t hi·ªán.
    """
    print(f"--- B·∫Øt ƒë·∫ßu nh·∫≠p b·∫£n d·ªãch t·ª´ '{translation_file_path}' ---")
    try:
        translations = {}
        with open(translation_file_path, 'r', encoding='utf-8') as f_dich:
            for line in f_dich:
                line = line.strip()
                if not line: continue
                parts = line.split('|||', 1)
                if len(parts) != 2:
                    print(f"‚ö†Ô∏è B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá: {line}")
                    continue
                try:
                    line_num = int(parts[0])
                    if line_num not in translations:
                        translations[line_num] = []
                    translations[line_num].append(parts[1])
                except ValueError:
                    print(f"‚ö†Ô∏è D√≤ng kh√¥ng h·ª£p l·ªá (s·ªë d√≤ng): {line}")

        if not translations:
            print("‚ùå L·ªói: File d·ªãch r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá.")
            return

        with open(original_file_path, 'r', encoding='utf-8') as f_goc:
            lines = f_goc.readlines()

        # Thay th·∫ø t·ª´ng d√≤ng
        for line_num, trans_list in translations.items():
            idx = line_num - 1
            if idx < 0 or idx >= len(lines):
                print(f"‚ö†Ô∏è D√≤ng {line_num} n·∫±m ngo√†i ph·∫°m vi file g·ªëc.")
                continue

            line = lines[idx]
            trans_iter = iter(trans_list)

            # Thay th·∫ø t·ª´ng chu·ªói "" theo th·ª© t·ª±
            def replace_quote(match):
                try:
                    return f'"{next(trans_iter)}"'
                except StopIteration:
                    return match.group(0)  # N·∫øu h·∫øt b·∫£n d·ªãch, gi·ªØ nguy√™n

            lines[idx] = re.sub(r'"([^"]*)"', replace_quote, line)

        with open(new_file_path, 'w', encoding='utf-8') as f_out:
            f_out.writelines(lines)

        print(f"‚úÖ Nh·∫≠p b·∫£n d·ªãch th√†nh c√¥ng! File m·ªõi: '{new_file_path}'")
    except FileNotFoundError as e:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: '{e.filename}'")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")


# ==============================================================================
# C√ÅC CH·ª®C NƒÇNG M·ªöI (Ch·∫ø ƒë·ªô 3 & 4)
# ==============================================================================

def protect_placeholders(input_file_path, protected_file_path, mapping_file_path):
    """
    Ch·∫ø ƒë·ªô 3: Thay th·∫ø c√°c placeholder b·∫±ng m√£ t·∫°m @@id@@ v√† l∆∞u b·∫£n ƒë·ªì.
    H·ªó tr·ª£: [abc], {xyz}, <tag>, %(var)s
    """
    print(f"--- B·∫£o v·ªá placeholder trong '{input_file_path}' ---")
    # C·∫≠p nh·∫≠t regex: h·ªó tr·ª£ k√Ω t·ª± Unicode, kho·∫£ng tr·∫Øng
    placeholder_regex = re.compile(
        r'(\[[^\]]*\]|\{[^}]*\}|%\([^)]*\)[a-zA-Z]|%[sdif])'
    )

    placeholders_map = []
    protected_lines = []

    try:
        with open(input_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.rstrip('\n')
                if '|||' not in line:
                    protected_lines.append(line + '\n')
                    continue

                line_num, text = line.split('|||', 1)

                # T√¨m v√† thay th·∫ø t·ª´ng placeholder
                def replace_placeholder(match):
                    ph = match.group(1)
                    ph_id = len(placeholders_map)
                    placeholders_map.append(ph)
                    return f"@@{ph_id}@@"

                protected_text = placeholder_regex.sub(replace_placeholder, text)
                protected_lines.append(f"{line_num}|||{protected_text}\n")

        # Ghi file ƒë√£ b·∫£o v·ªá
        with open(protected_file_path, 'w', encoding='utf-8') as f:
            f.writelines(protected_lines)

        # Ghi b·∫£n ƒë·ªì
        with open(mapping_file_path, 'w', encoding='utf-8') as f:
            json.dump(placeholders_map, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ B·∫£o v·ªá th√†nh c√¥ng!")
        print(f"   ‚Üí File ƒë·ªÉ d·ªãch: '{protected_file_path}'")
        print(f"   ‚Üí File b·∫£n ƒë·ªì: '{mapping_file_path}'")

    except Exception as e:
        print(f"‚ùå L·ªói khi b·∫£o v·ªá placeholder: {e}")


def restore_placeholders(translated_protected_path, final_file_path, mapping_file_path):
    """
    Ch·∫ø ƒë·ªô 4: Kh√¥i ph·ª•c c√°c @@id@@ th√†nh placeholder g·ªëc.
    """
    print(f"--- Kh√¥i ph·ª•c placeholder t·ª´ '{translated_protected_path}' ---")
    try:
        with open(mapping_file_path, 'r', encoding='utf-8') as f:
            placeholders_map = json.load(f)

        with open(translated_protected_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # Regex t√¨m m√£ t·∫°m
        temp_regex = re.compile(r'@@(\d+)@@')

        restored_lines = []
        for line in lines:
            def restore_match(match):
                idx = int(match.group(1))
                if 0 <= idx < len(placeholders_map):
                    return placeholders_map[idx]
                return match.group(0)  # gi·ªØ nguy√™n n·∫øu l·ªói

            restored_line = temp_regex.sub(restore_match, line)
            restored_lines.append(restored_line)

        with open(final_file_path, 'w', encoding='utf-8') as f:
            f.writelines(restored_lines)

        print(f"‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng! File cu·ªëi: '{final_file_path}'")

    except FileNotFoundError as e:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: '{e.filename}'")
    except json.JSONDecodeError:
        print(f"‚ùå File b·∫£n ƒë·ªì JSON kh√¥ng h·ª£p l·ªá: '{mapping_file_path}'")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")


# ==============================================================================
# GIAO DI·ªÜN CH√çNH
# ==============================================================================

def main():
    print("üéÆ CH∆Ø∆†NG TR√åNH H·ªñ TR·ª¢ D·ªäCH REN'PY üéÆ")
    while True:
        print("\n" + "="*50)
        print("CH·ªåN CH·∫æ ƒê·ªò:")
        print("1. Xu·∫•t chu·ªói g·ªëc ƒë·ªÉ d·ªãch")
        print("2. Nh·∫≠p b·∫£n d·ªãch v√†o file g·ªëc")
        print("3. B·∫£o v·ªá placeholder (tr∆∞·ªõc khi d·ªãch)")
        print("4. Kh√¥i ph·ª•c placeholder (sau khi d·ªãch)")
        print("0. Tho√°t")
        choice = input("üëâ Ch·ªçn (0-4): ").strip()

        if choice == '1':
            print("\nüìÅ [Ch·∫ø ƒë·ªô 1] Tr√≠ch xu·∫•t chu·ªói t·ª´ file .rpy")
            src = input("File g·ªëc (*.rpy): ").strip()
            out = input("File xu·∫•t (vd: can_dich.txt): ").strip()
            if src and out:
                extract_to_translate(src, out)

        elif choice == '2':
            print("\nüì• [Ch·∫ø ƒë·ªô 2] Nh·∫≠p b·∫£n d·ªãch v√†o file g·ªëc")
            src = input("File g·ªëc (*.rpy): ").strip()
            trans = input("File ƒë√£ d·ªãch (da_dich.txt): ").strip()
            out = input("File k·∫øt qu·∫£ (game_vn.rpy): ").strip()
            if all([src, trans, out]):
                import_translation(src, trans, out)

        elif choice == '3':
            print("\nüõ°Ô∏è [Ch·∫ø ƒë·ªô 3] B·∫£o v·ªá placeholder")
            src = input("File c·∫ßn b·∫£o v·ªá (can_dich.txt): ").strip()
            out = input("File ƒë√£ b·∫£o v·ªá (vd: protected.txt): ").strip()
            map_file = input("File map (m·∫∑c ƒë·ªãnh: placeholders_map.json): ").strip()
            if not map_file:
                map_file = "placeholders_map.json"
            if src and out:
                protect_placeholders(src, out, map_file)

        elif choice == '4':
            print("\nüîÑ [Ch·∫ø ƒë·ªô 4] Kh√¥i ph·ª•c placeholder")
            src = input("File ƒë√£ d·ªãch (c√≥ @@id@@): ").strip()
            out = input("File ho√†n ch·ªânh (da_dich_final.txt): ").strip()
            map_file = input("File map (m·∫∑c ƒë·ªãnh: placeholders_map.json): ").strip()
            if not map_file:
                map_file = "placeholders_map.json"
            if src and out:
                restore_placeholders(src, out, map_file)

        elif choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.")


if __name__ == "__main__":
    main()